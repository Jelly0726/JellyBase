plugins{
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
    id 'com.huawei.agconnect'
}
android {
    //生产环境域名地址
    def API_DEV_HOST = "\"http://driver.test.com/\""
    //开发环境域名地址
    def API_DEBUG_HOST = "\"http://driver.4000000144.com/\""

    compileSdkVersion 30
    defaultConfig {
        applicationId "com.jelly.jellybase"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 3
        versionName "1.0.3F" //versionName 包含"F"表示强制更新
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        multiDexEnabled true
        //vectorDrawables.useSupportLibrary = true//使你的app使用矢量图support library；
        // android {compileOptions.encoding = "GBK"}  //增加的内容，可以解决部署到设备上汉字显示乱码的问题
        //ndk编译生成.so文件
//        ndk {
////            moduleName "testjni"         //生成的so名字
//            abiFilters 'armeabi-v7a', 'arm64-v8a','x86', 'x86_64'
////            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
//        }
        //极光推送
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "你的appkey", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
        //Android Studio 内置一个名为 Vector Asset Studio 的工具，在低版本SDK上编译APK期间，
        // 针对VectorDrawable脚本自动生成一组PNG位图资源BitmapDrawable，取代矢量图形（在5.0及以后的手机上运行时会正常引用VectorDrawable）。
        vectorDrawables.generatedDensities = ['hdpi', 'xxhdpi']
        vectorDrawables.useSupportLibrary = true
        /*
        兼容包在矢量资源引用、代码调用时，存在一定限制
        在 ImageView 等引用 VectorDrawable 资源时，需要使用app:srcCompat取代android:src
        代码中使用setImageResource()指定资源 id 时，无需更改代码
        将 VectorDrawable 用于 View 背景时，需要通过以下代码设定：
        Resources resources = context.getResources(Resources, int, Theme);
        Theme theme = context.getTheme();
        Drawable drawable = VectorDrawableCompat.create(resources, R.drawable.vector_drawable, theme);
        view.setBackground(drawable);
        代码中需要进行Drawable的实现类型转换时，可使用以下代码段执行：

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            VectorDrawable vectorDrawable =  (VectorDrawable) drawable;
        } else {
            BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
        }

        创建好的 VectorDrawable 动画资源，需要通过代码方式加载到 View 容器内，并指定执行动画

        使用原生支持的代码设定（5.0 LOLLIPOP, API 21）
        ImageView imageView = (ImageView) findViewById(R.id.imageView);
        AnimatedVectorDrawable vectorDrawable = (AnimatedVectorDrawable) getResources().getDrawable(AnimatedVectorDrawableRes, Theme);
        imageView.setImageDrawable(vectorDrawable);
        vectorDrawable.start();
        使用 Support Library 时的动画设置
        矢量动画要求最低SDK为Android 3.0，并且不支持<path>路径类型的变换

        ImageView imageView = (ImageView) findViewById(R.id.imageView);
        AnimatedVectorDrawableCompat drawableCompat = AnimatedVectorDrawableCompat.create(context, AnimatedVectorDrawableRes);
        imageView.setImageDrawable(drawableCompat);
        drawableCompat.start();
        * */
        resConfig 'en'
    }
    signingConfigs {
        release {
            storeFile file("Jelly.jks")
            storePassword "1207qw"
            keyAlias "jelly"
            keyPassword "1207qw"
            //v1SigningEnabled false
            // v2SigningEnabled false
        }
        debug {
            storeFile file("Jelly.jks")
            storePassword "1207qw"
            keyAlias "jelly"
            keyPassword "1207qw"
            //v1SigningEnabled false
            // v2SigningEnabled false
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "IS_MUST_LOGIN", "false"//是否必须登录
            buildConfigField "boolean", "LOG_DEBUG", "true"//是否输出LOG信息
            buildConfigField "boolean", "SEND_ERR", "true"//是否发送崩溃信息
            buildConfigField "String", "API_HOST", "${API_DEBUG_HOST}"//开发环境域名地址
            // 移除无用的resource文件
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles 'proguard-project.txt'
            //自定义导出apk文件名
            applicationVariants.all { variant ->
                variant.outputs.all { output ->  // each 改为 all
                    def fileName = "V${variant.versionName}_debug.apk"
                    def outFile = output.outputFile
                    if (outFile != null && outFile.name.endsWith('.apk')) {
                        outputFileName = fileName  //  output.outputFile 改为 outputFileName
                    }
                }
            }
        }
        release {
            signingConfig signingConfigs.release
            buildConfigField "boolean", "IS_MUST_LOGIN", "false"//是否必须登录
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "SEND_ERR", "true"//是否发送崩溃信息
            buildConfigField "String", "API_HOST", "${API_DEV_HOST}"//生产环境域名地址
            // 移除无用的resource文件
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles 'proguard-project.txt'
            //自定义导出apk文件名
            applicationVariants.all { variant ->
                variant.outputs.all { output ->  // each 改为 all
                    def fileName = "V${variant.versionName}_release.apk"
                    def outFile = output.outputFile
                    if (outFile != null && outFile.name.endsWith('.apk')) {
                        outputFileName = fileName  //  output.outputFile 改为 outputFileName
                    }
                }
            }
        }
//        innerTest {
//            matchingFallbacks = ['debug', 'release']
//        }
        customDebugType {
            //可调试 也适用于包含 C/C++ 代码的模块 正式发布需要关闭，注意其他库的也要关闭
            debuggable false
        }
    }
//    ndkVersion "21.4.7075529"
    // For Java compilers:
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // For Kotlin compilers:
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8

    }
    // 移除lint检查的error
    lintOptions {
        checkReleaseBuilds false //打包release版本的时候是否进行检测
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false // 有错误是否停止build
    }
    //关闭Android Studio的PNG合法性检查的
//    aaptOptions.cruncherEnabled = false
//    aaptOptions.useNewCruncher = false
    // multiDex的一些相关配置，这样配置可以让你的编译速度更快
    dexOptions {
        //使用增量模式构建
        incremental true
        //最大堆内存
        javaMaxHeapSize "8g"  //注意内存是自己电脑内存大小配置
        //是否支持大工程模式
        jumboMode = true
        //预编译
        preDexLibraries = false
        //线程数
        threadCount = 5
    }
    //kotlin Parcelize传值
    androidExtensions {
        experimental = true
    }
    //开启viewbinding
    buildFeatures{
        viewBinding=true
    }
    packagingOptions {/*
        exclude  在打包时移除项目中的相关文件，不打入apk文件中
        doNotStrip 剔除对应的架构的工具链
        pickFirst  当有多个匹配项的时候匹配到第一个就可以了
      */
        exclude 'classes.dex'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
//解决加android:extractNativeLibs="false" 会导致加固后不能安装 的问题
        doNotStrip "*/arm64-v8a/*.so"
//        doNotStrip "*/armeabi/*.so"
        doNotStrip "*/armeabi-v7a/*.so"
        doNotStrip "*/x86/*.so"
//        doNotStrip "*/mips/*.so"
//        doNotStrip "*/mips64/*.so"
        doNotStrip "*/x86_64/*.so"
    }
}
//导入智能更新 SDK 的 AAR 文件
repositories {
    flatDir {
        dirs 'libs'
    }
}
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            //注: 某些输入文件使用或覆盖了已过时的 API。
            //注: 有关详细信息, 请使用 -Xlint:deprecation 重新编译。
            //注: 某些输入文件使用了未经检查或不安全的操作。
            //注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'

    //华为推送
    //其它已存在的依赖不要删除
    implementation 'com.huawei.hms:push:5.1.1.301'
    //百度智能更新 SDK 的 AAR 文件
    implementation(name: 'autoupdatesdk-release', ext: 'aar')
    implementation files('libs/Msc.jar')
    //高德地图so及jar
    //因为导航里已经有地图所以3D地图和导航不能同时导入
    //api 'com.amap.api:3dmap:latest.integration'
    //    api 'com.amap.api:3dmap:6.5.0'
    //定位功能
    implementation 'com.amap.api:location:latest.integration'
//        api 'com.amap.api:location:5.0.0'
    //搜索功能
    implementation 'com.amap.api:search:latest.integration'
//        api 'com.amap.api:search:7.3.0'
    //导航
    implementation 'com.amap.api:navi-3dmap:latest.integration'
//        api 'com.amap.api:navi-3dmap:7.5.0'
    //百度文字识别(身份证、银行卡等)
    implementation files('libs/ocr-sdk.jar')
    implementation project(path: ':library:ocr_ui')
    //基础
    implementation project(path: ':library:baselibrary')
}
